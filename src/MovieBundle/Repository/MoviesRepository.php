<?php

namespace MovieBundle\Repository;


/**
 * MoviesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MoviesRepository extends \Doctrine\ORM\EntityRepository {

    public function selectBrainy() {
         $qb = $this->createQueryBuilder('p')
                ->select('p.path')
                ->where('p.brainy LIKE :brainy')
                ->setParameter('brainy', 'yes')
                ->setMaxResults(3)
                ->getQuery()
                ->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        $array0 = $qb;
        $array= array();
        for($i=0;$i<count($qb);$i++){
            $array[$i] = $array0[$i]['path'];
        }
        shuffle($array);
        return $array[0];
        
    }

    public function selectCategory($yearEvents, $gender, $brainy, $emotions, $actionPlace, $currentId) {
      $qb = $this->createQueryBuilder('f');

        $i = 0;
        $w = 0;

        foreach ($actionPlace as $place) {
            $qb->join("f.ActionPlaces", "$place", \Doctrine\ORM\Query\Expr\Join::WITH, "$place.locale LIKE :locale$place")->addSelect("$place")
                    ->setParameter("locale$place", $actionPlace[$i]);
            $i++;
        }
        foreach ($emotions as $value) {
            $qb->join("f.emotions", "$value", \Doctrine\ORM\Query\Expr\Join::WITH, "$value.emotion LIKE :emotion$value")->addSelect("$value")
                    ->setParameter("emotion$value", $emotions[$w]);

            $w++;
        }
       $qb->where("f.yearEvents LIKE :yearEvents")
                        ->setParameter("yearEvents", $yearEvents)
                        ->andWhere("f.gender LIKE :gender")
                        ->setParameter("gender", $gender)
                        ->andWhere("f.brainy LIKE :brainy")
                        ->setParameter("brainy", $brainy);
        return $qb->getQuery()
                        ->getResult();
    }

    public function selecLastId($yearEvents, $gender, $brainy, $emotions, $actionPlace) {
        $qb = $this->createQueryBuilder('f');

        $i = 0;
        $w = 0;

        foreach ($actionPlace as $place) {
            $qb->join("f.ActionPlaces", "$place", \Doctrine\ORM\Query\Expr\Join::WITH, "$place.locale LIKE :locale$place")->addSelect("$place")
                    ->setParameter("locale$place", $actionPlace[$i]);
            $i++;
        }
        foreach ($emotions as $value) {
            $qb->join("f.emotions", "$value", \Doctrine\ORM\Query\Expr\Join::WITH, "$value.emotion LIKE :emotion$value")->addSelect("$value")
                    ->setParameter("emotion$value", $emotions[$w]);

            $w++;
        }
        return $qb->where("f.yearEvents LIKE :yearEvents")
                        ->setParameter("yearEvents", $yearEvents)
                        ->andWhere("f.gender LIKE :gender")
                        ->setParameter("gender", $gender)
                        ->andWhere("f.brainy LIKE :brainy")
                        ->setParameter("brainy", $brainy)
                        ->select('COUNT(f)')
                        ->getQuery()
                        ->getSingleScalarResult();
    }

}
